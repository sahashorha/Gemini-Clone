{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\podda\\\\OneDrive\\\\Desktop\\\\Intership\\\\ASSIGNEMENTS\\\\ASSIGNEMENT 07\\\\gemini\\\\src\\\\context\\\\context.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useState } from \"react\";\nimport run from \"../config/gemini\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Context = /*#__PURE__*/createContext();\nconst ContextProvider = props => {\n  _s();\n  const [input, setInput] = useState(\"\");\n  const [recentPrompt, setRecentPrompt] = useState(\"\");\n  const [prevPrompts, setPrevPrompts] = useState([]);\n  const [showResult, setShowResult] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [resultData, setResultData] = useState(\"\");\n  const delayPara = (index, nextWord) => {\n    setTimeout(function () {\n      setResultData(prev => prev + nextWord);\n    }, 75 * index);\n  };\n  const newChat = () => {\n    setLoading(false);\n    setShowResult(false);\n  };\n  const onSent = async prompt => {\n    setResultData(\"\");\n    setLoading(true);\n    setShowResult(true);\n    let response;\n    if (prompt !== undefined) {\n      response = await run(prompt);\n      setRecentPrompt(prompt);\n    } else {\n      setPrevPrompts(prev => [...prev, input]);\n      setRecentPrompt(input);\n      response = await run(input);\n    }\n    let responseArray = response.split(\"**\");\n    let newResponse = \"\";\n    for (let i = 0; i < responseArray.length; i++) {\n      if (i === 0 || i % 2 !== 1) {\n        newResponse += responseArray[i];\n      } else {\n        newResponse += \"<b>\" + responseArray[i] + \"</b>\";\n      }\n    }\n    let newResponse2 = newResponse.split(\"*\").join(\"</br>\");\n    let newResponseArray = newResponse2.split(\" \");\n    for (let i = 0; i < newResponseArray.length; i++) {\n      const nextWord = newResponseArray[i];\n      delayPara(i, nextWord + \" \");\n    }\n    setLoading(false);\n    setInput(\"\");\n  };\n  const contextValue = {\n    prevPrompts,\n    setPrevPrompts,\n    onSent,\n    setRecentPrompt,\n    recentPrompt,\n    showResult,\n    loading,\n    resultData,\n    input,\n    setInput\n  };\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: contextValue,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 9\n  }, this);\n};\n_s(ContextProvider, \"T9amFa3heZeqmqAMPubYcTbbeSk=\");\n_c = ContextProvider;\nexport default ContextProvider;\nvar _c;\n$RefreshReg$(_c, \"ContextProvider\");","map":{"version":3,"names":["createContext","useState","run","jsxDEV","_jsxDEV","Context","ContextProvider","props","_s","input","setInput","recentPrompt","setRecentPrompt","prevPrompts","setPrevPrompts","showResult","setShowResult","loading","setLoading","resultData","setResultData","delayPara","index","nextWord","setTimeout","prev","newChat","onSent","prompt","response","undefined","responseArray","split","newResponse","i","length","newResponse2","join","newResponseArray","contextValue","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/podda/OneDrive/Desktop/Intership/ASSIGNEMENTS/ASSIGNEMENT 07/gemini/src/context/context.jsx"],"sourcesContent":["import { createContext, useState } from \"react\";\r\nimport run from \"../config/gemini\";\r\nexport const Context = createContext();\r\nconst ContextProvider = (props) => {\r\n\r\n    const [input, setInput] = useState(\"\");\r\n    const [recentPrompt, setRecentPrompt] = useState(\"\");\r\n    const [prevPrompts, setPrevPrompts] = useState([]);\r\n    const [showResult, setShowResult] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n    const [resultData, setResultData] = useState(\"\");\r\n\r\n    const delayPara = (index, nextWord) => {\r\n        setTimeout(function () {\r\n            setResultData(prev => prev + nextWord);\r\n        }, 75 * index)\r\n    }\r\n    const newChat=()=>{\r\n        setLoading(false)\r\n        setShowResult(false)\r\n    }\r\n     \r\n\r\n    const onSent= async(prompt)=>{\r\n        setResultData(\"\")\r\n        setLoading(true)\r\n        setShowResult(true)\r\n        let response;\r\n        if(prompt !== undefined){\r\n            response=await run(prompt)\r\n            setRecentPrompt(prompt)\r\n        }else{\r\n            setPrevPrompts(prev=>[...prev,input])\r\n            setRecentPrompt(input)\r\n            response = await run(input)\r\n        }\r\n    \r\n       let responseArray=response.split(\"**\");\r\n       let newResponse=\"\";\r\n       for(let i=0;i<responseArray.length;i++)\r\n       {\r\n        if(i===0 || i%2 !==1){\r\n            newResponse+=responseArray[i];\r\n        }\r\n        else{\r\n            newResponse+= \"<b>\"+responseArray[i]+\"</b>\";\r\n        }\r\n       }\r\n       let newResponse2=newResponse.split(\"*\").join(\"</br>\")\r\n       let newResponseArray=newResponse2.split(\" \");\r\n       for(let i=0;i<newResponseArray.length;i++)\r\n       {\r\n        const nextWord=newResponseArray[i];\r\n        delayPara(i,nextWord+\" \")\r\n       }\r\n       \r\n       setLoading(false)\r\n       setInput(\"\")\r\n\r\n     \r\n    }\r\n\r\n\r\n\r\n    const contextValue = {\r\n        prevPrompts,\r\n        setPrevPrompts,\r\n        onSent,\r\n        setRecentPrompt,\r\n        recentPrompt,\r\n        showResult,\r\n        loading,\r\n        resultData,\r\n        input,\r\n        setInput\r\n\r\n    }\r\n    return (\r\n        <Context.Provider value={contextValue}>\r\n            {props.children}\r\n        </Context.Provider>\r\n    )\r\n}\r\n\r\nexport default ContextProvider;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}